# filepath: support_bot/tech_bot.py
import sqlite3
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = YOUR_ADMIN_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ===

def init_db():
    conn = sqlite3.connect("support.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS dialog (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            fullname TEXT,
            role TEXT,
            message TEXT,
            photo TEXT,
            status TEXT DEFAULT '–æ–∂–∏–¥–∞–Ω–∏–µ',
            time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def save_dialog(user_id, username, fullname, role, message, photo=None):
    conn = sqlite3.connect("support.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO dialog (user_id, username, fullname, role, message, photo, status)
        VALUES (?, ?, ?, ?, ?, ?, '–æ–∂–∏–¥–∞–Ω–∏–µ')
    """, (user_id, username, fullname, role, message, photo))
    conn.commit()
    conn.close()

def get_dialog(user_id):
    conn = sqlite3.connect("support.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT role, message, photo FROM dialog
        WHERE user_id = ?
        ORDER BY time ASC
    """, (user_id,))
    rows = cursor.fetchall()
    conn.close()
    return rows

def update_status(user_id, new_status):
    conn = sqlite3.connect("support.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE dialog SET status = ? WHERE user_id = ?", (new_status, user_id))
    conn.commit()
    conn.close()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"/start –æ—Ç {user.full_name} ({user.id})")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.")

async def user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    username = user.username or "–±–µ–∑ username"
    fullname = user.full_name or "–±–µ–∑ –∏–º–µ–Ω–∏"
    text = update.message.text or ""
    photo = update.message.photo[-1].file_id if update.message.photo else None

    save_dialog(uid, username, fullname, "user", text, photo)

    msg = f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} | ID {uid}]:\n{text}"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"dialog:{uid}")]
    ])
    await context.bot.send_message(ADMIN_ID, msg, reply_markup=keyboard)
    if photo:
        await context.bot.send_photo(ADMIN_ID, photo=photo)

    await update.message.reply_text("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if "reply_to" not in context.user_data:
        return

    uid = context.user_data["reply_to"]
    text = update.message.text or ""
    photo = update.message.photo[-1].file_id if update.message.photo else None

    save_dialog(uid, "admin", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "admin", text, photo)

    await context.bot.send_message(uid, f"[–û–ø–µ—Ä–∞—Ç–æ—Ä]:\n{text}")
    if photo:
        await context.bot.send_photo(uid, photo)

    await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

async def open_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")
    if len(data) < 2:
        return

    uid = int(data[1])
    context.user_data["reply_to"] = uid
    dialog = get_dialog(uid)

    if not dialog:
        await query.edit_message_text("–î–∏–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return

    text = f"üí¨ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID {uid}:\n\n"
    media_group = []

    for role, msg, photo in dialog:
        prefix = "[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]" if role == "user" else "[–û–ø–µ—Ä–∞—Ç–æ—Ä]"
        if msg:
            text += f"{prefix}:\n{msg}\n\n"
        if photo:
            media_group.append(InputMediaPhoto(media=photo, caption=f"{prefix} (—Ñ–æ—Ç–æ)"))

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–†–µ—à–µ–Ω–æ", callback_data=f"status:—Ä–µ—à–µ–Ω–æ:{uid}"),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="cancel")
        ]
    ])

    if media_group:
        await query.message.edit_text(text[:4096], reply_markup=keyboard)
        for media in media_group:
            await query.message.chat.send_media_group([media])
    else:
        await query.edit_message_text(text[:4096], reply_markup=keyboard)

async def change_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, status, uid = query.data.split(":")
    uid = int(uid)

    update_status(uid, status)

    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if status == "—Ä–µ—à–µ–Ω–æ":
        try:
            await context.bot.send_message(uid, "‚úÖ –í–∞—à –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    await query.edit_message_text(f"–°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞ —Å ID {uid} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '{status}' ‚úÖ")

async def cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.edit_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.")

# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ê ===

async def admin_dialog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /dialog user_id")
        return
    try:
        uid = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    context.user_data["reply_to"] = uid
    dialog = get_dialog(uid)
    if not dialog:
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = f"üí¨ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID {uid}:\n\n"
    for role, msg, photo in dialog:
        prefix = "[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]" if role == "user" else "[–û–ø–µ—Ä–∞—Ç–æ—Ä]"
        if msg:
            text += f"{prefix}:\n{msg}\n\n"
        if photo:
            await update.message.reply_photo(photo=photo, caption=f"{prefix} (—Ñ–æ—Ç–æ)")

    await update.message.reply_text(text[:4096])

# === –ó–ê–ü–£–°–ö ===

def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("dialog", admin_dialog_command))

    app.add_handler(CallbackQueryHandler(open_dialog, pattern="^dialog:"))
    app.add_handler(CallbackQueryHandler(change_status, pattern="^status:"))
    app.add_handler(CallbackQueryHandler(cancel_callback, pattern="^cancel"))

    app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_reply))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, user_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()